import Audio;
import Graphics2D;
import Graphics2DText;
import Math;
import Random;
import Resources;
import TwoCansAlpha4;

const X_RES = $var["screen_width"];
const Y_RES = $var["screen_height"];

// The number of vowels to include in the tray.
const N_VOWELS = 5;
// The number of consonants to include in the tray.
const N_CONSONANTS = 7;

// The proportion of possible words required to be found in order to win.
const REQUIRED_SCORE_RATIO = 0.25;

const SIDE_MARGIN = 5.0;

const BOARD_FONT_SIZE = 18;
const BOARD_ROW_HEIGHT = 32.0;
const BOARD_COL_WIDTH = 21.0;
const BOARD_N_COLS = floor((X_RES - 2.0 * SIDE_MARGIN) / BOARD_COL_WIDTH);
const BOARD_MIN_ROWS = 12;
const BOARD_MAX_ROWS = 14;
const BOARD_TOP_MARGIN = 3.5 * BOARD_ROW_HEIGHT;
const SCORE_BAR_HEIGHT = 20;

const BUTTON_MARGIN_TOP = 10.0;
const BUTTON_MARGIN_BETWEEN = 10.0;

const TRAY_FONT_SIZE = 24;
const TRAY_X = 305.0;
const TRAY_Y = 8.0;
const TRAY_HEIGHT = 40.0;
const TRAY_COL_WIDTH = 27.0;

const GUESS_X = TRAY_X;
const GUESS_Y = 64.0;
const GUESS_HEIGHT = 30.0;
const GUESS_COL_WIDTH = BOARD_COL_WIDTH;

const SCORE_HINTS_FONT_SIZE = 12;
const STARTING_HINTS = 1;
const PTS_PER_HINT = 30;

enum TextColor { BLACK, GREEN, YELLOW, RED }

function stringToCharCounts(string) {
	result = {};
	for (c : string) {
		if (!result.contains(c)) {
			result[c] = 0;
		}
		++result[c];
	}
	return result;
}

function ceil(x) {
	xFloor = floor(x);
	return x == xFloor ? xFloor : xFloor + 1;
}

class MainScene : AbstractScene {
	static field font = FontResource.fromResource("Courier Prime.ttf").getRenderer();

	static field ding = SoundResource.loadFromResource("ding.ogg");
	static field bong = SoundResource.loadFromResource("bong.ogg");

	static field vowels = ["A", "E", "I", "O", "U"];
	static field consonants =
		[ "B", "C", "D", "F", "G", "H", "J"
		, "K", "L", "M", "N", "P", "Q", "R"
		, "S", "T", "V", "W", "X", "Y", "Z"
		];
	static field keyToLetter;

	static constructor() {
		// Create key list.
		MainScene.keyToLetter =
			{ KeyboardKey.A: "A"
			, KeyboardKey.B: "B"
			, KeyboardKey.C: "C"
			, KeyboardKey.D: "D"
			, KeyboardKey.E: "E"
			, KeyboardKey.F: "F"
			, KeyboardKey.G: "G"
			, KeyboardKey.H: "H"
			, KeyboardKey.I: "I"
			, KeyboardKey.J: "J"
			, KeyboardKey.K: "K"
			, KeyboardKey.L: "L"
			, KeyboardKey.M: "M"
			, KeyboardKey.N: "N"
			, KeyboardKey.O: "O"
			, KeyboardKey.P: "P"
			, KeyboardKey.Q: "Q"
			, KeyboardKey.R: "R"
			, KeyboardKey.S: "S"
			, KeyboardKey.T: "T"
			, KeyboardKey.U: "U"
			, KeyboardKey.V: "V"
			, KeyboardKey.W: "W"
			, KeyboardKey.X: "X"
			, KeyboardKey.Y: "Y"
			, KeyboardKey.Z: "Z"
			};
	}

	field wordTree;
	field boardWords;
	field wordToBoardIdx;

	field tray;
	field guess;
	field currentScore;
	field maxScore;
	field requiredScore;
	field scoreText;

	field hints;
	field hintsRequiredPts;
	field hintsText;

	field buttons;
	field checkButton;
	field shuffleButton;
	field clearButton;
	field deleteButton;
	field concedeRestartButton;
	field muteButton;

	field muted = false;

	function reset() {
		// Add random letters to the tray.
		trayLetters = [];
		for (i = 0; i < N_VOWELS; ++i) {
			trayLetters.add(MainScene.vowels.choice());
		}
		for (i = 0; i < N_CONSONANTS; ++i) {
			trayLetters.add(MainScene.consonants.choice());
		}
		trayLetters.shuffle();
		this.tray = new Word(trayLetters.join(""), TRAY_X, TRAY_Y, true, true);

		// Find possible words with at least three letters.
		possibleWords = this.wordTree
			.getWordsUsing(stringToCharCounts(this.tray.getText()));
		// Shuffle and then sort by length, to avoid giving hints besides word length.
		possibleWords.shuffle();
		possibleWords.sort(s => s.length);
		// Populate the found word map and find the max word length and max/required score.
		this.boardWords = [];
		this.wordToBoardIdx = {};
		this.currentScore = 0;
		this.maxScore = 0;
		boardIdx = 0;
		row = 0;
		col = 0;
		for (word : possibleWords) {
			if (col + word.length >= BOARD_N_COLS) {
				++row;
				col = 0;
			}
			x = SIDE_MARGIN + col * BOARD_COL_WIDTH;
			y = BOARD_TOP_MARGIN + row * BOARD_ROW_HEIGHT;
			this.boardWords.add(new Word(word, x, y, false, false));
			this.wordToBoardIdx[word] = boardIdx;
			++boardIdx;
			col += word.length + 1;
			this.maxScore += Scoring.score(word);
		}
		this.requiredScore = ceil(REQUIRED_SCORE_RATIO * this.maxScore);
		// Ensure that the number of rows is within the desired range.
		nrows = row + 1;
		if (nrows < BOARD_MIN_ROWS || nrows > BOARD_MAX_ROWS) {
			this.reset();
		}

		this.renderScoreText();

		this.guess = new Word("", GUESS_X, GUESS_Y, false, true);

		// Initialize hints.
		this.hints = STARTING_HINTS;
		this.hintsRequiredPts = PTS_PER_HINT;
		this.renderHintsText();

		// Set concede/restart button text to concede.
		this.concedeRestartButton.setText("Concede (Esc)");
	}

	constructor(wordTree) {
		this.wordTree = wordTree;
		// Add buttons.
		this.buttons = [];
		x = SIDE_MARGIN;
		// Clear
		this.clearButton = new Button(x, BUTTON_MARGIN_TOP, 0.0, 0.0, "Clear (Space)");
		this.clearButton.hotkeys.add(KeyboardKey.SPACE);
		this.buttons.add(this.clearButton);
		x += this.clearButton.width + SIDE_MARGIN;
		// Delete
		this.deleteButton = new Button(x, BUTTON_MARGIN_TOP, 0.0, 0.0, "Delete (. / ‚Üê)");
		this.deleteButton.hotkeys.add(KeyboardKey.PERIOD);
		this.deleteButton.hotkeys.add(KeyboardKey.LEFT);
		this.buttons.add(this.deleteButton);
		// Shuffle
		x = SIDE_MARGIN;
		y = BUTTON_MARGIN_TOP + BUTTON_MARGIN_BETWEEN + BUTTON_HEIGHT;
		this.shuffleButton = new Button(x, y, 0.0, 0.0, "Shuffle (Shift)");
		this.shuffleButton.repeatable = true;
		this.buttons.add(this.shuffleButton);
		x += this.shuffleButton.width + SIDE_MARGIN;
		// Check
		this.checkButton = new Button(x, y, 0.0, 0.0, "Check (Enter)");
		this.checkButton.hotkeys.add(KeyboardKey.ENTER);
		this.buttons.add(this.checkButton);
		// Concede/restart
		this.concedeRestartButton = new Button(X_RES - SIDE_MARGIN, BUTTON_MARGIN_TOP, 1.0, 0.0, " ");
		this.concedeRestartButton.hotkeys.add(KeyboardKey.ESCAPE);
		this.buttons.add(this.concedeRestartButton);
		// Mute
		this.muteButton = new Button(X_RES - SIDE_MARGIN, y, 1.0, 0.0, "Mute (\\)");
		this.muteButton.hotkeys.add(KeyboardKey.BACKSLASH);
		this.buttons.add(this.muteButton);

		this.reset();
	}

	function emptyTray() {
		text = this.guess.getText();
		this.tray.setText(this.tray.getText() + text[::-1]);
		this.guess.setText("");
	}

	function revealAll() {
		revealedAny = false;
		win = this.currentScore < this.requiredScore;
		color = win ? TextColor.RED : TextColor.GREEN;
		for (word : this.boardWords) {
			if (!word.isRevealed()) {
				word.revealAll();
				word.flash(color);
				word.setBasicColor(color);
				revealedAny = true;
			}
		}
		if (revealedAny) {
			if (!this.muted) {
				if (win) {
					MainScene.bong.play();
				} else {
					MainScene.ding.play();
				}
			}
			this.changeConcedeButtonToRestart();
		}
		return revealedAny;
	}

	function changeConcedeButtonToRestart() {
		this.concedeRestartButton.setText("Restart (Esc)");
	}

	function update(inputManager, events) {
		// Update buttons.
		for (element : this.buttons) {
			element.update(inputManager, events);
		}

		// Mute/unmute.
		if (this.muteButton.clicked) {
			if (this.muted) {
				this.muted = false;
				this.muteButton.setText("Mute (\\)");
			} else {
				this.muted = true;
				this.muteButton.setText("Unmute (\\)");
			}
		}

		// Reveal all or reset.
		if (this.concedeRestartButton.clicked) {
			if (!this.revealAll()) {
				this.reset();
			}
		}

		// Shuffle letter tray.
		if (this.shuffleButton.clicked || inputManager.isShiftPressed()) {
			trayLetters = [];
			for (c : this.tray.getText()) {
				trayLetters.add(c);
			}
			trayLetters.shuffle();
			this.tray.setText(trayLetters);
		}

		// Use letters from tray.
		for (event : events) {
			if (event.type == EventType.KEY && event.down) {
				if (MainScene.keyToLetter.contains(event.key)) {
					letter = MainScene.keyToLetter[event.key];
					trayText = this.tray.getText();
					for (i = 0; i < trayText.length; ++i) {
						if (trayText[i] == letter) {
							this.guess.setText(this.guess.getText() + trayText[i]);
							this.tray.setText(trayText[:i] + trayText[i+1:]);
							break;
						}
					}
				}
			}
		}
		// Check for clicked tray letters.
		trayText = this.tray.getText();
		for (i = 0; i < trayText.length; ++i) {
			if (inputManager.didMouseClickHere(TRAY_X + i * TRAY_COL_WIDTH, TRAY_Y, TRAY_COL_WIDTH, TRAY_HEIGHT)) {
				this.guess.setText(this.guess.getText() + trayText[i]);
				this.tray.setText(trayText[:i] + trayText[i+1:]);
				break;
			}
		}

		// Return letters to tray.
		if (this.clearButton.clicked) {
			this.emptyTray();
		}

		// Return one letter to tray.
		if (this.deleteButton.clicked) {
			guessText = this.guess.getText();
			if (guessText.length > 0) {
				this.tray.setText(this.tray.getText() + guessText[-1]);
				this.guess.setText(guessText[:-1]);
			}
		}
		// Check for clicked guess letters.
		guessText = this.guess.getText();
		for (i = 0; i < guessText.length; ++i) {
			if (inputManager.didMouseClickHere(GUESS_X + i * GUESS_COL_WIDTH, GUESS_Y, GUESS_COL_WIDTH, GUESS_HEIGHT)) {
				this.tray.setText(this.tray.getText() + guessText[i]);
				this.guess.setText(guessText[:i] + guessText[i+1:]);
				break;
			}
		}

		// Check current guess.
		if (this.checkButton.clicked) {
			if (this.wordToBoardIdx.contains(this.guess.getText())) {
				word = this.boardWords[this.wordToBoardIdx[this.guess.getText()]];
				if (word.isRevealed()) {
					// Already found this word.
					word.flash(TextColor.YELLOW);
				} else {
					// New word.
					// Update score.
					wordScore = Scoring.score(this.guess.getText());
					this.currentScore += wordScore;
					this.renderScoreText();
					// Update hints.
					this.hintsRequiredPts -= wordScore;
					while (this.hintsRequiredPts <= 0) {
						++this.hints;
						this.hintsRequiredPts += PTS_PER_HINT;
					}
					this.renderHintsText();
					// Reveal.
					word.revealAll();
					// Flash green.
					word.flash(TextColor.GREEN);
					// Ding!
					if (!this.muted) {
						MainScene.ding.play();
					}
					// Change the concede button to "reveal" if enough words have been found.
					if (this.currentScore >= this.requiredScore) {
						this.concedeRestartButton.setText("Reveal All (Esc)");
						// Change the concede button to "restart" if all words have been found.
						foundAll = true;
						for (word : this.boardWords) {
							if (!word.isRevealed()) {
								foundAll = false;
								break;
							}
						}
						if (foundAll) {
							this.concedeRestartButton.setText("Restart (Esc)");
						}
					}
				}
				this.emptyTray();
			} else {
				this.guess.flash(TextColor.RED);
				if (!this.muted) {
					MainScene.bong.play();
				}
			}
		}

		// Update words.
		this.guess.update();
		for (word : this.boardWords) {
			word.update();
		}
	}

	function renderScoreText() {
		MainScene.font
			.setStyle(FontStyle.BOLD)
			.setColor(0, 0, 0)
			.setSize(SCORE_HINTS_FONT_SIZE);
		text = "Score: " + this.currentScore + "/" + this.maxScore
			+ " (" + max(0, this.requiredScore - this.currentScore) + " pts. left to \"win\")";
		this.scoreText = MainScene.font.render(text);
	}

	function renderHintsText() {
		MainScene.font
			.setStyle(FontStyle.BOLD)
			.setColor(0, 0, 0)
			.setSize(SCORE_HINTS_FONT_SIZE);
		this.hintsText = MainScene.font.render
			( "Hints: " + this.hints + " (" + this.hintsRequiredPts + " pts. to next hint)"
			);
	}

	function render() {
		Graphics2D.Draw.fill(255, 255, 255);

		// Draw tray letters.
		this.tray.draw();

		// Draw current guess.
		this.guess.draw();

		// Draw words on board.
		for (word : this.boardWords) {
			word.draw();
		}

		// Draw buttons.
		for (element : this.buttons) {
			element.draw();
		}

		// Draw score bar.
		Graphics2D.Draw.rectangle
			( 0
			, Y_RES - SCORE_BAR_HEIGHT
			, X_RES
			, SCORE_BAR_HEIGHT
			, 0, 0, 0
			);
		if (this.currentScore >= this.requiredScore) {
			r = 0;
			g = 255;
		} else {
			r = 255;
			g = 0;
		}
		Graphics2D.Draw.rectangle
			( 1
			, Y_RES - SCORE_BAR_HEIGHT + 1
			, (X_RES - 2) * this.currentScore / this.maxScore
			, SCORE_BAR_HEIGHT - 2
			, r, g, 0
			);
		Graphics2D.Draw.line(X_RES / 4, Y_RES - SCORE_BAR_HEIGHT + 1, X_RES / 4, Y_RES - 1, 2, 0, 255, 0);

		// Draw score text.
		this.scoreText.draw(SIDE_MARGIN, Y_RES - this.scoreText.height - SCORE_BAR_HEIGHT);

		// Draw hints text.
		this.hintsText.draw
			( X_RES - this.hintsText.width - SIDE_MARGIN
			, Y_RES - this.hintsText.height - SCORE_BAR_HEIGHT
			);
	}
}
