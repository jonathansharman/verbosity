import Graphics2D;
import Graphics2DText;
import Math;
import Resources;
import TwoCansAlpha4;

const CHUNK_SIZE = 2000;

const TITLE_Y = 100.0;

const INSTRUCTIONS_X = 20.0;
const INSTRUCTIONS_Y = 235.0;
const INSTRUCTIONS_LINE_SKIP = 35.0;

class LoadingScene : AbstractScene {
	field wordsList;
	field wordsIdx;
	field wordTree;
	field firstCall = true;

	field font;
	field title;
	field instructions;
	field status;

	constructor() {
		this.font = FontResource.fromResource('Courier Prime.ttf').getRenderer().setColor(0, 0, 0).setSize(42);
		this.title = this.font.render("Verbosity");

		this.font.setSize(18);
		this.instructions =
			[ this.font.render("Type words from the available letters! Earn 50% of the")
			, this.font.render("total Scrabble score of all possible words to \"win\"!")
			, this.font.render(" ")
			, this.font.render("Use hints to reveal letters by clicking on them!")
			, this.font.render(" ")
			, this.font.render("Don't press backspace! It is forbidden!")
			];

		this.font.setSize(24);
		this.status = this.font.render("Loading...  0%");

		// Load word list from disk.
		this.wordsList = Resources.readText("words.txt").split('\n');
		this.wordsIdx = 0;
		this.wordTree = new WordTree();
	}

	function update(inputManager, events) {
		// In order to render something immediately, don't do any work on the first call to update().
		if (this.firstCall) {
			this.firstCall = false;
			return;
		}

		if (this.wordsIdx < this.wordsList.length) {
			// Load word list into word tree in chunks.
			upperBound = Math.min(this.wordsIdx + CHUNK_SIZE, this.wordsList.length);
			for (; this.wordsIdx < upperBound; ++this.wordsIdx) {
				this.wordTree.insert(this.wordsList[this.wordsIdx]);
			}
			if (this.wordsIdx < this.wordsList.length) {
				// Update loading progress.
				pctLoaded = (100 * this.wordsIdx / (this.wordsList.length - 1));
				if (pctLoaded < 10) {
					pctLoaded = "  " + pctLoaded;
				} else if (pctLoaded < 100) {
					pctLoaded = " " + pctLoaded;
				}
				this.status = this.font.render("Loading..." + pctLoaded + "%");
			} else {
				// Finished loading.
				this.status = this.font.render("Click or press any key to start!");
			}
		} else {
			// Proceed on any input.
			for (event : events) {
				if ((event.type == EventType.KEY && event.down) || event.type == EventType.MOUSE_PRESS) {
					this.switchScene(new MainScene(this.wordTree));
				}
			}
		}
	}

	function render() {
		Graphics2D.Draw.fill(255, 255, 255);

		// Draw title.
		this.title.draw(0.5 * (X_RES - this.title.width), TITLE_Y);

		// Draw instructions.
		for (i = 0; i < this.instructions.length; ++i) {
			this.instructions[i].draw(INSTRUCTIONS_X, INSTRUCTIONS_Y + i * INSTRUCTIONS_LINE_SKIP);
		}
		
		// Draw status.
		this.status.draw(0.5 * (X_RES - this.status.width), 525);
	}
}
